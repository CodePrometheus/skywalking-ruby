# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: language-agent/Tracing.proto for package 'skywalking.v3'
# Original file comments:
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

require 'grpc'
require_relative 'Tracing_pb'

module Skywalking
  module V3
    module TraceSegmentReportService
      # Define a trace segment report service.
      # All language agents or any trace collecting component, could use this service to send span collection to the SkyWalking OAP backend.
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'skywalking.v3.TraceSegmentReportService'

        # Recommended trace segment report channel.
        # gRPC streaming provides better performance.
        # All language agents should choose this.
        rpc :collect, stream(::Skywalking::V3::SegmentObject), ::Skywalking::V3::Commands
        # An alternative for trace report by using gRPC unary
        # This is provided for some 3rd-party integration, if and only if they prefer the unary mode somehow.
        # The performance of SkyWalking OAP server would be very similar with streaming report,
        # the performance of the network and client side are affected
        rpc :collectInSync, ::Skywalking::V3::SegmentCollection, ::Skywalking::V3::Commands
      end

      Stub = Service.rpc_stub_class
    end
    module SpanAttachedEventReportService
      # //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      # ebpf agent(SkyWalking Rover) collects extra information from the OS(Linux Only) level to attach on the traced span.
      # Since v3.1
      # //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'skywalking.v3.SpanAttachedEventReportService'

        # Collect SpanAttachedEvent to the OAP server in the streaming mode.
        rpc :collect, stream(::Skywalking::V3::SpanAttachedEvent), ::Skywalking::V3::Commands
      end

      Stub = Service.rpc_stub_class
    end
  end
end
