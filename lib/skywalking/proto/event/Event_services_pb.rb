# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: event/Event.proto for package 'skywalking.v3'
# Original file comments:
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

require 'grpc'
require_relative 'Event_pb'

module Skywalking
  module V3
    module EventService
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'skywalking.v3.EventService'

        # When reporting an event, you typically call the collect function twice, one for starting of the event and the other one for ending of the event, with the same UUID.
        # There are also cases where you have both start time and end time already, for example, when exporting events from a 3rd-party system,
        # the start time and end time are already known so that you can call the collect function only once.
        rpc :collect, stream(::Skywalking::V3::Event), ::Skywalking::V3::Commands
      end

      Stub = Service.rpc_stub_class
    end
  end
end
